{"version":3,"file":"static/js/575.865adcf4.chunk.js","mappings":"gJACA,MAA0B,wBAA1B,EAAkE,8BAAlE,EAAmH,iCAAnH,EAAmK,6BAAnK,EAAiN,+BAAjN,EAA+P,6BAA/P,EAA8S,gCAA9S,EAAqW,qCAArW,EAA+a,yBAA/a,EAAid,uB,6BCcjd,EAXmB,SAAC,GAAuB,IAArBA,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAC7B,OACE,iBAAKC,UAAWC,EAAuB,IAAMA,EAA7C,WACE,gBAAKJ,IAAKA,EAAKK,IAAI,OACnB,SAAC,KAAD,CAASC,GAAI,WAAaL,EAA1B,SACGC,GADgCD,OCIzC,EATgB,SAAC,GAAmB,IAAjBD,EAAgB,EAAhBA,IAAKO,EAAW,EAAXA,KACtB,OACE,iBAAKJ,UAAWC,EAAhB,WACE,gBAAKJ,IAAKA,EAAKK,IAAI,OACnB,gBAAKF,UAAWC,EAAhB,SAA0CG,QCNhD,EAA0B,wBAA1B,EAAkE,8BCclE,EAZkB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACE,iBAAKL,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAwCI,KACxC,gBACER,IAAI,+EACJK,IAAI,U,oBCoEZ,EAlEe,SAACI,GACd,IAAIC,EAAiBD,EAAME,SAASC,KAAI,SAACC,GAAD,OACtC,SAAC,EAAD,CAAYX,KAAMW,EAAOX,KAAMD,GAAIY,EAAOZ,GAAoBD,IAAKa,EAAOb,KAAvBa,EAAOZ,OAGxDa,EAAmBL,EAAMM,SAASH,KAAI,SAACI,GAAD,OACxC,SAAC,EAAD,CAAST,KAAMS,EAAQR,QAASP,GAAIe,EAAQf,GAAqBD,IAAKgB,EAAQhB,KAAzBgB,EAAQf,OAG3DgB,EAAcR,EAAMS,SAASN,KAAI,SAACI,GACpC,OAAO,SAAC,EAAD,CAA4Bf,GAAIe,EAAQf,GAAIO,QAASQ,EAAQR,SAA7CQ,EAAQf,OAuBjC,OACE,iBAAKE,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAwCM,KACxC,gBAAKP,UAAWC,EAAhB,SAA2CU,KAC3C,iBAAKX,UAAWC,EAAhB,WACE,yBAAMa,KACN,SAAC,KAAD,CACEE,cAAe,CAAEX,QAAS,IAC1BY,SAAU,SAACC,GA5BF,IAACd,EAAAA,EA6BGc,EAAMb,QA5BzBC,EAAMa,uBAAuBf,IA8BvBgB,iBAAkBC,EAAAA,GALpB,UAOE,UAAC,KAAD,YACE,0BACE,SAAC,KAAD,CACEC,KAAM,OACNvB,KAAM,UACNC,UAAWC,EACXsB,YAAa,oBAGjB,SAAC,KAAD,CAAcxB,KAAK,aACnB,mBAAQC,UAAWC,EAAgBqB,KAAM,SAAzC,8B,8BCTZ,GAAeE,E,QAAAA,KACbC,EAAAA,EAAAA,KAxBoB,SAACC,GACrB,MAAO,CACLlB,SAAUkB,EAAMC,WAAWC,WAC3BhB,SAAUc,EAAMC,WAAWE,aAC3BC,cAAeJ,EAAMC,WAAWI,aAChChB,SAAUW,EAAMC,WAAWK,kBAmBJ,CACvBb,uBAAAA,EAAAA,IAEFc,EAAAA,EAJF,CAKEC","sources":["webpack://vccom/./src/components/Dialog/Dialog.module.css?8ed7","components/Dialog/DialogItem/DialogItem.jsx","components/Dialog/Message/Message.jsx","webpack://vccom/./src/components/Dialog/Send/MyMess.module.css?8e09","components/Dialog/Send/Message.jsx","components/Dialog/Dialog.jsx","components/Dialog/MyDialogContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialog_dialogs__3lVSc\",\"dialog__items\":\"Dialog_dialog__items__4Vtfm\",\"dialog__messages\":\"Dialog_dialog__messages__EjZ-3\",\"dialog__send\":\"Dialog_dialog__send__tPvkg\",\"dialog__active\":\"Dialog_dialog__active__HzvUo\",\"dialog__item\":\"Dialog_dialog__item__o9OnI\",\"dialog__message\":\"Dialog_dialog__message__ZDikn\",\"dialog__Message__All\":\"Dialog_dialog__Message__All__JbB6l\",\"All\":\"Dialog_All__x6u7V\",\"textArea\":\"Dialog_textArea__ozkk9\",\"buttON\":\"Dialog_buttON__dwHZj\",\"Message\":\"Dialog_Message__VmE7p\",\"Message__Text\":\"Dialog_Message__Text__WE8ut\",\"error\":\"Dialog_error__ig+AG\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './../Dialog.module.css';\n\nconst DialogItem = ({ src, id, name }) => {\n  return (\n    <div className={classes.dialog__item + ' ' + classes.dialog__active}>\n      <img src={src} alt=\"#\"></img>\n      <NavLink to={'/Dialog/' + id} key={id}>\n        {name}\n      </NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from 'react';\nimport classes from './../Dialog.module.css';\n\nconst Message = ({ src, text }) => {\n  return (\n    <div className={classes.dialog__Message__All}>\n      <img src={src} alt=\"#\" />\n      <div className={classes.dialog__message}>{text}</div>\n    </div>\n  );\n};\n\nexport default Message;\n","// extracted by mini-css-extract-plugin\nexport default {\"Message\":\"MyMess_Message__jJdRr\",\"Message__Text\":\"MyMess_Message__Text__bXA5P\"};","import React from 'react';\nimport classes from './MyMess.module.css';\n\nconst MessageMY = ({message}) => {\n  return (\n    <div className={classes.Message}>\n      <div className={classes.Message__Text}>{message}</div>\n      <img\n        src=\"https://i.pinimg.com/originals/94/67/61/946761e2f6bcbde6f2ceab394eb69677.jpg\"\n        alt=\"#\"\n      />\n    </div>\n  );\n};\n\nexport default MessageMY;\n","import React from 'react';\n// import { Navigate } from 'react-router-dom';\nimport './Dialog.module.css';\nimport classes from './Dialog.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport MessageMY from './Send/Message';\n// import { Form, Field, useFormik } from 'formik';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { dialogFormSchema } from '../FormValidation/LoginFormSchema';\n\nconst Dialog = (props) => {\n  let dialogElements = props.diafirst.map((dialog) => (\n    <DialogItem name={dialog.name} id={dialog.id} key={dialog.id} src={dialog.src} />\n  ));\n\n  let messagesElements = props.mesfirst.map((element) => (\n    <Message text={element.message} id={element.id} key={element.id} src={element.src} />\n  ));\n\n  let NewMessList = props.MessList.map((element) => {\n    return <MessageMY key={element.id} id={element.id} message={element.message} />;\n  });\n\n  let addMessage = (text) => {\n    props.AddMessageThunkCreator(text);\n  };\n\n  // const formiks = useFormik({\n  //   initialValues: { message: '' },\n  //   onSubmit: (values) => {\n  //     addMessage(values.message);\n  //   },\n  //   validationSchema: dialogFormSchema,\n  //   // validate: (values) => {\n  //   //   const errors = {};\n  //   //   if (values.message.length > 300) {\n  //   //     errors.message = \"Wo, you're so cool, but put a 'send' button please\";\n  //   //     butON=true\n  //   //   }\n  //   //   return errors;\n  //   // },\n  // });\n\n  return (\n    <div className={classes.dialogs}>\n      <div className={classes.dialog__items}>{dialogElements}</div>\n      <div className={classes.dialog__messages}>{messagesElements}</div>\n      <div className={classes.dialog__send}>\n        <div>{NewMessList}</div>\n        <Formik\n          initialValues={{ message: '' }}\n          onSubmit={(value) => {\n            addMessage(value.message);\n          }}\n          validationSchema={dialogFormSchema}\n        >\n          <Form>\n            <div>\n              <Field\n                type={'text'}\n                name={'message'}\n                className={classes.textArea}\n                placeholder={'Your message'}\n              />\n            </div>\n            <ErrorMessage name=\"message\" />\n            <button className={classes.buttON} type={'submit'}>\n              Send\n            </button>\n          </Form>\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default Dialog;\n","// import React from 'react';\nimport './Dialog.module.css';\nimport Dialog from './Dialog';\n// import { Navigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { AddMessageThunkCreator } from './../../redux/dReduser';\nimport { withAuthRedirect } from '../../hoc/AuthReduser';\nimport { compose } from 'redux';\n// const MyDialog = (props) => {\n//   let linkArea = React.createRef();\n\n//   const addMessage = () => {\n//     let text = linkArea.current.value;\n//     props.store.dispatch({ type: 'SEND-MESSAGE', userText: text });\n//     props.store.dispatch({ type: 'CHANGE-MESSAGE', userText: '' });\n//   };\n\n//   const changeText = () => {\n//     let text = linkArea.current.value;\n//     props.store.dispatch({ type: 'CHANGE-MESSAGE', userText: text });\n//   };\n\n//   return (\n//     <Dialog\n//       diafirst={props.store.getState().DialogPage.dialogData}\n//       mesfirst={props.store.getState().DialogPage.messagesData}\n//       chacha={props.store.getState().DialogPage.MessagesText}\n//       MessList={props.store.getState().DialogPage.myMessagesData}\n//       addMessage={addMessage}\n//       changeText={changeText}\n//       link={linkArea}\n//     />\n//   );\n// };\n\nlet mapStateToProps = (state) => {\n  return {\n    diafirst: state.DialogPage.dialogData,\n    mesfirst: state.DialogPage.messagesData,\n    textAreaValue: state.DialogPage.MessagesText,\n    MessList: state.DialogPage.myMessagesData,\n  };\n};\n\n// let mapDispatchToProps = (dispatch) => {\n//   // dispatch = props.store.dispatch\n//   //\n//   return {\n//     addMessage: (text) => {\n//       dispatch({ type: 'SEND-MESSAGE', userText: text });\n//       dispatch({ type: 'CHANGE-MESSAGE', userText: '' });\n//     },\n//     changeText: (text) => {\n//       dispatch({ type: 'CHANGE-MESSAGE', userText: text });\n//     },\n//   };\n// };\n\nexport default compose(\n  connect(mapStateToProps, {\n    AddMessageThunkCreator,\n  }),\n  withAuthRedirect,\n)(Dialog);\n"],"names":["src","id","name","className","classes","alt","to","text","message","props","dialogElements","diafirst","map","dialog","messagesElements","mesfirst","element","NewMessList","MessList","initialValues","onSubmit","value","AddMessageThunkCreator","validationSchema","dialogFormSchema","type","placeholder","compose","connect","state","DialogPage","dialogData","messagesData","textAreaValue","MessagesText","myMessagesData","withAuthRedirect","Dialog"],"sourceRoot":""}